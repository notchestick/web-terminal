---
import { commands } from '../utils/commands';

interface Props {
  title?: string;
}

const { title = "Terminal" } = Astro.props;
---

<div class="bg-gray-900 rounded-lg shadow-lg w-full max-w-2xl mx-auto overflow-hidden">
  <div class="bg-gray-800 px-4 py-2 flex items-center">
    <div class="flex space-x-2">
      <div class="w-3 h-3 bg-red-500 rounded-full"></div>
      <div class="w-3 h-3 bg-yellow-500 rounded-full"></div>
      <div class="w-3 h-3 bg-green-500 rounded-full"></div>
    </div>
    <div class="text-white ml-4">{title}</div>
  </div>
  <div class="p-4 h-96 overflow-y-auto font-mono" id="terminal-output">
    <div class="text-green-400">
      <p>Welcome to Web Terminal! Type 'help' for available commands.</p>
      <div class="command-line flex">
        <span class="text-blue-400">guest@web-terminal</span>
        <span class="text-white">:</span>
        <span class="text-green-400">~$</span>
        <input 
          type="text" 
          class="bg-transparent outline-none text-white ml-2 flex-1"
          id="command-input"
          autocomplete="off"
          spellcheck="false"
        />
      </div>
    </div>
  </div>
</div>

<script>
  import { executeCommand } from '../utils/commands';
  import { currentPath } from '../utils/fileSystem';

  const input = document.getElementById('command-input') as HTMLInputElement;
  const output = document.getElementById('terminal-output');
  let commandHistory: string[] = [];
  let historyIndex = -1;

  function createNewPrompt() {
    const promptDiv = document.createElement('div');
    promptDiv.className = 'command-line flex';
    promptDiv.innerHTML = `
      <span class="text-blue-400">guest@web-terminal</span>
      <span class="text-white">:</span>
      <span class="text-green-400">${currentPath[0]}$</span>
      <input 
        type="text" 
        class="bg-transparent outline-none text-white ml-2 flex-1"
        autocomplete="off"
        spellcheck="false"
      />
    `;
    
    const newInput = promptDiv.querySelector('input') as HTMLInputElement;
    newInput.addEventListener('keydown', handleKeyDown);
    return { promptDiv, newInput };
  }

  function handleKeyDown(e: KeyboardEvent) {
    const input = e.target as HTMLInputElement;

    if (e.key === 'Enter' && input.value.trim()) {
      const command = input.value.trim();
      commandHistory.push(command);
      historyIndex = commandHistory.length;

      const result = executeCommand(command);
      input.disabled = true;

      if (result) {
        const resultLine = document.createElement('p');
        resultLine.className = 'text-white whitespace-pre-wrap';
        resultLine.textContent = result;
        output?.appendChild(resultLine);
      }

      const { promptDiv, newInput } = createNewPrompt();
      output?.appendChild(promptDiv);
      newInput.focus();
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      if (historyIndex > 0) {
        historyIndex--;
        input.value = commandHistory[historyIndex];
      }
    } else if (e.key === 'ArrowDown') {
      e.preventDefault();
      if (historyIndex < commandHistory.length - 1) {
        historyIndex++;
        input.value = commandHistory[historyIndex];
      } else {
        historyIndex = commandHistory.length;
        input.value = '';
      }
    }
  }

  input?.addEventListener('keydown', handleKeyDown);
</script>